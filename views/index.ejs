<!doctype html>
<html>
	<head>
		<title>CoinChart - To the Moon!</title>
		<link rel="stylesheet" href="/style/style.css">
	</head>
	<body>
		<div class="container">
			<h1>CoinChart - To the moon!</h1>
			<div id="chartcontainer">
				<canvas id="chart"></canvas>
			</div>
			<div id="btncontainer">
				<ul id="periods">
					<li id="1day">1day</li>
					<li id="7day">7day</li>
					<li id="30day">30day</li>
					<li id="90day">90day</li>
					<li id="180day">180day</li>
					<li id="365day" class="selected">365day</li>
				</ul>				
			</div>
			<div id="listcontainer">
				<ul id="list">
					
				</ul>
				<input id="search" type="text" placeholder="..." value="" autocomplete="off">
				<ul id="result">
					
				</ul>
			</div>
		</div>
		<script src="/socket.io/socket.io.js"></script>
		<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.5.0/Chart.bundle.min.js"></script>
		<script>
			const socket = io();
			const list = document.getElementById('list');
			const periods = document.getElementById('periods');
			const search = document.getElementById('search');
			const result = document.getElementById('result');
			let chart = null; 
			let userTimeFrame = '365day';
  
		    socket.once('coins', (coins) => showCoins(coins));
		  	socket.on('coindata', (data) => chartData(data));
		 
		  	list.addEventListener('click', function(e){
		  		e.preventDefault();
		  		let coin = e.target.id;
		  		if (!e.target.classList.toggle('on')){
		  			socket.emit('removecoin', {coin, period: userTimeFrame});
		  		} else {
		  			socket.emit('addcoin', {coin: coin, period: userTimeFrame});
		  		}
		  	});

		  	periods.addEventListener('click', function(e){
		  		e.preventDefault();
		  		userTimeFrame = e.target.id;
		  		if (e.target.classList.contains('selected')) return;
		  		socket.emit('addcoin', {coin: [], period: userTimeFrame});
		  		for (let i = 0; i<periods.children.length; i++){
		  			periods.children[i].classList.remove('selected');
		  		}
		  		e.target.classList.add('selected');
		  	});

		  	result.addEventListener('click', function(e){
		  		e.preventDefault();
		  		let coin = e.target;
		  		socket.emit('addcoin', {coin: coin.id, period: userTimeFrame});
		  		coin.long = coin.innerHTML.split(' - ')[1];
		  		coin.short = coin.id;
		  		appendListItem(coin, list, "coinlist on");
		  		result.innerHTML = "";
		  		search.value = "";
		  	});

		  	function showCoins(coins) {
		  		const sortedCoins = coins.sort((a, b) => a.position24 - b.position24).map(v => ({
		  				long: v.long, 
		  				short: v.short, 
		  				price: v.price
		  			}));
		  		const topfive = sortedCoins.slice(0,5);

		  		topfive.forEach(function(c){
		  			appendListItem(c, list, "coinlist on");
		  		});
		  		
		  		search.addEventListener('input', function(e){
			  		e.preventDefault();
			  		result.innerHTML = "";
			  		search.setAttribute('style', 'border-radius: 3px');
			  		let term = e.target.value.trim();
			  		if (term.length < 2) return;
			  		let results = sortedCoins.slice(5).filter(n => n.long.toLowerCase().indexOf(term) >= 0 || n.short.toLowerCase().indexOf(term) >= 0).slice(0,8);
			  		console.log(results);
			  		if (results.length > 0){
			  			results.forEach(function(c){
			  				appendListItem(c, result, `searchresult ${c.short}`);
			  				search.setAttribute('style', 'border-radius: 3px 3px 0 0;');
			  			});
			  		} 
		  		});
		  	}

		  	function appendListItem(coin, element, classes){
		  		const item = document.createElement('li');
		  		item.setAttribute("id" , coin.short);
		  		item.setAttribute("class", classes);
		  		item.innerHTML = `${coin.long} - ${coin.short}`;
		  		element.appendChild(item);
		  	}

		  	function chartData(data) {
		  		if (chart !== null) chart.destroy();
		  		const ctx = document.getElementById('chart').getContext('2d');
		  		chart = new Chart(ctx, {
		  			type: 'line',
		  			data,
		  			options: {
				        hover: {
				            mode: 'nearest'
				        },
				        tooltips: {
				        	mode: 'nearest'
				        },
				        responsive: true,
				        maintainAspectRatio: true,
				        scales: {
				        	xAxes: [{
							    type: 'time',
							    ticks: {
							        autoSkip: true,
							        maxTicksLimit: 12
							    }
							}]
						}
				    }
		  		});
		  	}
		  	
		  	
		</script>
	</body>
</html>